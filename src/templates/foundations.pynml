switch(FEAT_OBJECTS, SELF, switch_initialise_foundations_objects_slope_zoffset_slope_check, tile_slope) {
    SLOPE_FLAT: return 0;
    return 8;
}
switch(FEAT_OBJECTS, SELF, switch_initialise_foundations_objects_slope_zoffset, nearby_tile_water_class(0, 0)) {
    WATER_CLASS_NONE: switch_initialise_foundations_objects_slope_zoffset_slope_check;
    return 8;
}


switch(FEAT_OBJECTS, SELF, switch_initialise_foundations_objects_store_spriteset_numbers, sw_face, se_face, [
        STORE_TEMP(sw_face, ${graphics_temp_storage.var_custom_foundation_sw_face}),
        STORE_TEMP(se_face, ${graphics_temp_storage.var_custom_foundation_se_face}),
    ]) {
    <!--! if it's not water always hide custom foundations -->
    WATER_CLASS_NONE: return 1;
    return 0;
}
switch(FEAT_OBJECTS, SELF, switch_initialise_foundations_objects_hide_foundations_water_check_sw, nearby_tile_water_class(1, 0)) {
    <!--! if it's not water always hide custom foundations -->
    WATER_CLASS_NONE: return 1;
    return 0;
}
switch(FEAT_OBJECTS, SELF, switch_initialise_foundations_objects_check_slope, tile_slope) {
    <tal:foundation_slope_mapping repeat="slope_mapping foundations.slope_mapping_for_nml_slope_check()">
        ${slope_mapping["slope_name"]}: switch_initialise_foundations_objects_store_spriteset_numbers(${slope_mapping["sw_face"]}, ${slope_mapping["se_face"]});
    </tal:foundation_slope_mapping>
    return;
}

switch(FEAT_OBJECTS, SELF, switch_initialise_foundations_objects, [
        STORE_TEMP(switch_initialise_foundations_objects_slope_zoffset(), ${graphics_temp_storage.var_z_offset}),
        switch_initialise_foundations_objects_check_slope(),
    ]) {
    return;
}
