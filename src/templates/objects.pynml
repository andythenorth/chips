<tal:include metal:use-macro="load: spritelayouts_object.pynml" />


<!--! the 'tiles' for all objects for the industry are resolved to a single set, and a shared set of animation switches provided -->
<!--!<tal:include define="animation_context 'object';
                     animation_macros load: animation_macros.pynml"
             metal:use-macro="animation_macros.macros['tile_animation']" />-->

<!--! station not object in case it conflicts with python 'object' at any point (might not, but who wants to test that? -->
<!--! note that station objects are passed as 'stations' by the facility type -->
<tal:objects repeat="station stations">

    <tal:view repeat="view ['ne_sw', 'nw_se']">
        switch(FEAT_OBJECTS, SELF, ${station.id}_switch_graphics_layout_${view}, relative_pos) {
            <tal:spritelayouts repeat="x_y_spritelayout station.layout">
                relative_coord(${x_y_spritelayout[0]}, ${x_y_spritelayout[1]}): ${x_y_spritelayout[2]}_${view};
            </tal:spritelayouts>
        }
    </tal:view>

    switch(FEAT_OBJECTS, SELF, ${station.id}_switch_graphics_view, view) {
        0: ${station.id}_switch_graphics_layout_ne_sw;
        1: ${station.id}_switch_graphics_layout_nw_se;
    }

    switch(FEAT_OBJECTS, SELF, ${station.id}_switch_graphics, [
        <tal:custom_sprite_indexes repeat="custom_sprite_index_struct station.custom_sprite_index_structs">
            // ${custom_sprite_index_struct[2]}
            STORE_TEMP(${custom_sprite_index_struct[0]}, ${custom_sprite_index_struct[1]}),
        </tal:custom_sprite_indexes>
        STORE_TEMP(1, ${graphics_temp_storage.var_hide_building_snow}),
    ]) {
        return ${station.id}_switch_graphics_view;
    }

    item(FEAT_OBJECTS, ${station.id}, ${station.numeric_id}) {
        property {
            class:                  "${station.station_class.class_id}";
    		classname:              string(${station.classname_string_id});
            name:                   string(${station.name_string_id});
            climates_available:     ALL_CLIMATES;
            size:                   [1, 1]; <!--! always 1x1 as of Oct 2023 -->
            build_cost_multiplier:  0;
            remove_cost_multiplier: 0;
            introduction_date:      date(1, 1, 1);
            end_of_life_date:       date(${global_constants.max_game_date}, 1, 1);
            /* Anything can overbuild the object, removing returns the money, we don't want foundations and we want to allow bridges */
            object_flags:           bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ANIMATED);
            height:                 6;
            num_views:              2; <!--! ne_sw and nw_se orientations -->
            <!--!
            <tal:animation_info condition="station.tile.animation_length > 1">
                animation_info:     [${'ANIMATION_LOOPING' if station.tile.animation_looping else 'ANIMATION_NON_LOOPING'}, ${station.tile.animation_length}];
            </tal:animation_info>
            <tal:animation_speed condition="station.tile.animation_speed > 0">
                animation_speed:    ${station.tile.animation_speed};
            </tal:animation_speed>
            animation_triggers:     ${station.animation_triggers};
            -->
        }
        graphics {
            <!--! colour:                 switch_colour_object(${industry.numeric_id}); -->
            <tal:drop replace="nothing">
            <tal:anim_next_frame condition="station.tile.custom_animation_next_frame">
                anim_next_frame: return ${station.tile.custom_animation_next_frame};
            </tal:anim_next_frame>
            <tal:anim_control condition="station.tile.custom_animation_control is not None">
                <!--! tedious optimisation to avoid a switch that returns 0 for one macro -->
                <tal:block condition="station.tile.custom_animation_control['macro'] == 'first_frame_is_0'">
                    <!--! starts animation on first frame, intended to be called by periodic tile loop -->
                    anim_control: 0;
                </tal:block>
                <tal:block condition="station.tile.custom_animation_control['macro'] != 'first_frame_is_0'">
                    anim_control: ${station.tile.id}_object_anim_control;
                </tal:block>
            </tal:anim_control>
            </tal:drop>
            <!--! purchase:               ${station.id}_spritelayout_purchase; -->
            ${station.id}_switch_graphics;
        }
    }

</tal:objects>
